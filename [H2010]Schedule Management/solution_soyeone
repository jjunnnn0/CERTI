#define nullptr 0
 
#define S_GRP 100
#define S_USR 1000
#define S_LET 27    // null : 0, a ~ z : 1 ~ 26
#define S_CAL 50000
 
int usr_count[S_USR];
 
struct User {
    int mName;
    User* next;
    User* prev;
}user_pool[S_CAL];
int usr_alloc;
 
struct Schedule {
    char mName[15];
    int mCnt;
    User mUsers;
    User* mMaster;
    Schedule* next;
    Schedule* prev;
}sch_pool[S_CAL];
int sch_alloc;
 
Schedule sch_table[S_GRP][S_LET][S_LET][S_LET];
 
void mstrcpy(char dst[], const char src[]) {
    register int c = 0;
    while ((dst[c] = src[c]) != 0) ++c;
}
 
int mstrcmp(const char str1[], const char str2[]) {
    register int c = 0;
    while (str1[c] != 0 && str1[c] == str2[c]) ++c;
    return str1[c] - str2[c];
}
 
void init()
{
    sch_alloc = 0;
    usr_alloc = 0;
 
    for (register int i = 0; i < S_USR; i++) {
        usr_count[i] = 0;
    }
 
    for (register int i = 0; i < S_GRP; i++) {
        for (register int l = 0; l < S_LET; l++) {
            for (register int m = 0; m < S_LET; m++) {
                for (register int n = 0; n < S_LET; n++) {
                    sch_table[i][l][m][n].next = nullptr;
                }
            }
        }
    }
}
 
void addEvent(int uid, char ename[], int groupid)
{
    register int l = ename[0] - 'a' + 1;
    register int m = 0, n = 0;
 
    bool find = false;
 
    if (ename[1] != '\0') {
        m = ename[1] - 'a' + 1;
        if (ename[2] != '\0') {
            n = ename[2] - 'a' + 1;
        }
    }
 
    register Schedule *sch_cur = &sch_table[groupid][l][m][n];
    while (sch_cur->next != nullptr) {
        sch_cur = sch_cur->next;
 
        if (mstrcmp(sch_cur->mName, ename) == 0) {
            find = true;
            break;
        }
    }
 
    User *usr_new = &user_pool[usr_alloc++];
    usr_new->mName = uid;
    usr_count[uid]++;
 
    register User *usr_cur;
 
    if (find) {
        usr_cur = &(sch_cur->mUsers);
 
        sch_cur->mCnt++;
 
        usr_new->next = usr_cur->next;
        usr_new->prev = usr_cur;
        usr_cur->next->prev = usr_new;
        usr_cur->next = usr_new;
    }
    else {
        Schedule *sch_new = &sch_pool[sch_alloc++];
        usr_cur = &(sch_new->mUsers);
 
        mstrcpy(sch_new->mName, ename);
        sch_new->mCnt = 1;
        sch_new->mMaster = usr_new;
 
        sch_cur->next = sch_new;
        sch_new->prev = sch_cur;
        sch_new->next = nullptr;
 
        usr_new->prev = usr_cur;
        usr_new->next = nullptr;
        usr_cur->next = usr_new;
    }
}
 
int deleteEvent(int uid, char ename[])
{
    register int l = ename[0] - 'a' + 1;
    register int m = 0, n = 0;
 
    register bool find;
 
    if (ename[1] != '\0') {
        m = ename[1] - 'a' + 1;
        if (ename[2] != '\0') {
            n = ename[2] - 'a' + 1;
        }
    }
 
    register Schedule *sch_cur;
    register User *usr_cur;
 
    register int ret = 0;
 
    for (register int i = 0; i < S_GRP; i++) {
        sch_cur = &sch_table[i][l][m][n];
 
        find = false;
        while (sch_cur->next != nullptr) {
            sch_cur = sch_cur->next;
 
            if (mstrcmp(sch_cur->mName, ename) == 0) {
                find = true;
                break;
            }
        }
 
        if (find) {
            usr_cur = &(sch_cur->mUsers);
            if (sch_cur->mMaster->mName == uid) {
//              usr_cur = &(sch_cur->mUsers);
                while (usr_cur->next != nullptr) {
                    usr_cur = usr_cur->next;
                    usr_count[usr_cur->mName]--;
                     
                    ret++;
                }
 
//              ret += sch_cur->mCnt;
                sch_cur->prev->next = sch_cur->next;
                if (sch_cur->next != nullptr) {
                    sch_cur->next->prev = sch_cur->prev;
                }
            }
            else {
//              usr_cur = &(sch_cur->mUsers);
 
                find = false;
                while (usr_cur->next != nullptr) {
                    usr_cur = usr_cur->next;
 
                    if (usr_cur->mName == uid) {
                        find = true;
                        break;
                    }
                }
 
                if (find) {
                    ret++;
                    usr_count[uid]--;
                    sch_cur->mCnt--;
 
                    usr_cur->prev->next = usr_cur->next;
                    if (usr_cur->next != nullptr) {
                        usr_cur->next->prev = usr_cur->prev;
                    }
                }
            }
        }
    }
 
    return ret;
}
 
int changeEvent(int uid, char ename[], char cname[])
{
    register int l = ename[0] - 'a' + 1;
    register int m = 0, n = 0;
 
    register bool find;
 
    if (ename[1] != '\0') {
        m = ename[1] - 'a' + 1;
        if (ename[2] != '\0') {
            n = ename[2] - 'a' + 1;
        }
    }
 
    register Schedule *sch_cur;
    register User *usr_cur;
 
    register int ret = 0;
 
    for (register int i = 0; i < S_GRP; i++) {
        sch_cur = &sch_table[i][l][m][n];
 
        find = false;
        while (sch_cur->next != nullptr) {
            sch_cur = sch_cur->next;
 
            if (mstrcmp(sch_cur->mName, ename) == 0) {
                find = true;
                break;
            }
        }
 
        if (find) {
            if (sch_cur->mMaster->mName == uid) {
                mstrcpy(sch_cur->mName, cname);
 
                sch_cur->prev->next = sch_cur->next;
                if (sch_cur->next != nullptr) {
                    sch_cur->next->prev = sch_cur->prev;
                }
 
                register int a = cname[0] - 'a' + 1;
                register int b = 0, c = 0;
 
                if (cname[1] != '\0') {
                    b = cname[1] - 'a' + 1;
                    if (cname[2] != '\0') {
                        c = cname[2] - 'a' + 1;
                    }
                }
 
                register Schedule *sch_tmp = &sch_table[i][a][b][c];
 
                sch_cur->next = sch_tmp->next;
                sch_cur->prev = sch_tmp;
                if (sch_tmp->next != nullptr) {
                    sch_tmp->next->prev = sch_cur;
                }
                sch_tmp->next = sch_cur;
 
                ret += sch_cur->mCnt;
            }
            else {
                usr_cur = &(sch_cur->mUsers);
 
                find = false;
                while (usr_cur->next != nullptr) {
                    usr_cur = usr_cur->next;
 
                    if (usr_cur->mName == uid) {
                        find = true;
                        break;
                    }
                }
 
                if (find) {
                    usr_cur->prev->next = usr_cur->next;
                    if (usr_cur->next != nullptr) {
                        usr_cur->next->prev = usr_cur->prev;
                    }
 
                    sch_cur->mCnt--;
 
                    Schedule *sch_new = &sch_pool[sch_alloc++];
                    mstrcpy(sch_new->mName, cname);
                    sch_new->mCnt = 1;
                    sch_new->mMaster = usr_cur;
 
                    usr_cur->next = nullptr;
                    usr_cur->prev = &(sch_new->mUsers);
                    sch_new->mUsers.next = usr_cur;
 
                    register int a = cname[0] - 'a' + 1;
                    register int b = 0, c = 0;
 
                    if (cname[1] != '\0') {
                        b = cname[1] - 'a' + 1;
                        if (cname[2] != '\0') {
                            c = cname[2] - 'a' + 1;
                        }
                    }
 
                    register Schedule *sch_tmp = &sch_table[i][a][b][c];
                    sch_new->next = sch_tmp->next;
                    sch_new->prev = sch_tmp;
                    if (sch_tmp->next != nullptr) {
                        sch_tmp->next->prev = sch_new;
                    }
                    sch_tmp->next = sch_new;
 
                    ret++;
                }
            }
        }
    }
 
    return ret;
}
 
int getCount(int uid)
{
    return usr_count[uid];
}
